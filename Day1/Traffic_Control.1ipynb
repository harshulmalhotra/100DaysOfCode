{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Vehicle Count:  9\n",
      " <h4> Estimating Traffic Light Time ....... </h4> </br>\n",
      " <h2> The Estimated green light time is [16.29814815] </h2>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tensorflow\n",
    "from imageai.Detection import ObjectDetection\n",
    "import os\n",
    "execution_path = os.getcwd()\n",
    "detector = ObjectDetection()\n",
    "detector.setModelTypeAsRetinaNet()\n",
    "detector.setModelPath( os.path.join(execution_path , \"resnet50_coco_best_v2.0.1.h5\"))\n",
    "detector.loadModel()\n",
    "detections = detector.detectObjectsFromImage(input_image=os.path.join(execution_path , \"cp.jpg\"), output_image_path=os.path.join(execution_path , \"image_out.jpg\"))\n",
    "people=0\n",
    "vehicles=0\n",
    "for eachObject in detections:\n",
    "    if eachObject[\"name\"] == \"person\" :\n",
    "        people=people+1\n",
    "    elif eachObject[\"name\"] in {\"car\",\"bicycle\",\"motorcycle\",\"truck\"} :\n",
    "        vehicles=vehicles+1\n",
    "    #print(eachObject[\"name\"] , \" : \" , eachObject[\"percentage_probability\"] )\n",
    "print(\"\\n\\nVehicle Count: \" , vehicles)\n",
    "#!/usr/bin/python36\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "#print(\"content-type: text/html\\n\")\n",
    "print(\" <h4> Estimating Traffic Light Time ....... </h4> </br>\")\n",
    "i=vehicles\n",
    "import pandas as pd\n",
    "if i in range(0,11):\n",
    "    vc = 1\n",
    "elif i in range(11,21):\n",
    "    vc = 2\n",
    "elif i in range(21,31):\n",
    "    vc = 3\n",
    "elif i in range(31,80):\n",
    "    vc = 4\n",
    "\n",
    "data = pd.read_csv('data_traffic.csv')\n",
    "y = data['time']\n",
    "x = data.iloc[:, 0:4]\n",
    "from sklearn.linear_model import LinearRegression\n",
    "model = LinearRegression()\n",
    "model.fit(x,y)\n",
    "y=model.predict([[vc,2,2,3]])\n",
    "print(\" <h2> The Estimated green light time is {} </h2>\".format(y))\n",
    "\n",
    "x1=data['vcount']\n",
    "y1=data['time']\n",
    "\n",
    "plt.scatter(x1, y1, label= \"stars\", color= \"green\",  \n",
    "            marker= \"*\", s=30) \n",
    "  \n",
    "# x-axis label \n",
    "plt.xlabel('vehicle count') \n",
    "# frequency label \n",
    "plt.ylabel('green light time') \n",
    "# plot title \n",
    "plt.title('My scatter plot!') \n",
    "# showing legend \n",
    "plt.legend() \n",
    "  \n",
    "# function to show the plot \n",
    "plt.show() \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/python36\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "#print(\"content-type: text/html\\n\")\n",
    "print(\" <h4> Estimating Traffic Light Time ....... </h4> </br>\")\n",
    "i=11\n",
    "import pandas as pd\n",
    "if i in range(0,11):\n",
    "    vc = 1\n",
    "elif i in range(11,21):\n",
    "    vc = 2\n",
    "elif i in range(21,31):\n",
    "    vc = 3\n",
    "elif i in range(31,80):\n",
    "    vc = 4\n",
    "\n",
    "data = pd.read_csv('data_traffic.csv')\n",
    "y = data['time']\n",
    "x = data.iloc[:, 0:4]\n",
    "from sklearn.linear_model import LinearRegression\n",
    "model = LinearRegression()\n",
    "model.fit(x,y)\n",
    "y=model.predict([[vc,2,2,3]])\n",
    "print(\" <h2> The Estimated green light time is {} </h2>\".format(y))\n",
    "\n",
    "x1=data['vcount']\n",
    "y1=data['time']\n",
    "\n",
    "plt.scatter(x1, y1, label= \"stars\", color= \"green\",  \n",
    "            marker= \"*\", s=30) \n",
    "  \n",
    "# x-axis label \n",
    "plt.xlabel('vehicle count') \n",
    "# frequency label \n",
    "plt.ylabel('green light time') \n",
    "# plot title \n",
    "plt.title('My scatter plot!') \n",
    "# showing legend \n",
    "plt.legend() \n",
    "  \n",
    "# function to show the plot \n",
    "plt.show() \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import numpy as np\n",
    "import cv2\n",
    "import time \n",
    "  \n",
    "# printing the start time  \n",
    "#print(\"The time of code execution begin is : \", end =\"\") \n",
    "#print(time.ctime()) \n",
    "# using sleep() to hault the code execution \n",
    "while True:\n",
    "    img_res = requests.get(\"http://192.168.43.72:8080/shot.jpg\")\n",
    "    img_arr = np.array(bytearray(img_res.content), dtype = np.uint8)\n",
    "    img = cv2.imdecode(img_arr,-1)\n",
    "\n",
    "    #cv2.imshow('frame', img)\n",
    "    cv2.imwrite('C:\\\\Users\\\\500061550\\\\Desktop\\\\original1.jpg',img) \n",
    "    if cv2.waitKey(0) & 0xFF == ord('q'):\n",
    "        break\n",
    "    img = cv2.imread('original1.jpg')\n",
    "    y=100\n",
    "    x=0\n",
    "    h=507\n",
    "    w=900\n",
    "\n",
    "    crop_img = img[y:y+h, x:x+w]\n",
    "    cv2.imwrite('re_size.jpg',crop_img)\n",
    "    from PIL import Image\n",
    "\n",
    "    from PIL import ImageEnhance\n",
    "\n",
    "    def adjust_brightness(input_image, output_image, factor):\n",
    "\n",
    "        image = Image.open(input_image)\n",
    "\n",
    "        enhancer_object = ImageEnhance.Brightness(image)\n",
    "\n",
    "        out = enhancer_object.enhance(factor)\n",
    "\n",
    "        out.save(output_image)\n",
    "\n",
    "    if __name__ == '__main__':\n",
    "\n",
    "        adjust_brightness('re_size.jpg','brightness.jpg',1.3)\n",
    "\n",
    "    def adjust_contrast(input_image, output_image, factor):\n",
    "\n",
    "        image = Image.open(input_image)\n",
    "\n",
    "        enhancer_object = ImageEnhance.Contrast(image)\n",
    "\n",
    "        out = enhancer_object.enhance(factor)\n",
    "\n",
    "        out.save(output_image)\n",
    "\n",
    "    if __name__ == '__main__':\n",
    "\n",
    "        adjust_contrast('brightness.jpg','contrast.jpg', 1.7)\n",
    "\n",
    "    def adjust_sharpness(input_image, output_image, factor):\n",
    "\n",
    "        image = Image.open(input_image)\n",
    "\n",
    "        enhancer_object = ImageEnhance.Sharpness(image)\n",
    "\n",
    "        out = enhancer_object.enhance(factor)\n",
    "\n",
    "        out.save(output_image)\n",
    "\n",
    "    if __name__ == '__main__':\n",
    "\n",
    "        adjust_sharpness('contrast.jpg','sharpness.jpg',1.4)\n",
    "        \n",
    "    import tensorflow\n",
    "    from imageai.Detection import ObjectDetection\n",
    "    import os\n",
    "    execution_path = os.getcwd()\n",
    "    detector = ObjectDetection()\n",
    "    detector.setModelTypeAsRetinaNet()\n",
    "    detector.setModelPath( os.path.join(execution_path , \"resnet50_coco_best_v2.0.1.h5\"))\n",
    "    detector.loadModel()\n",
    "    detections = detector.detectObjectsFromImage(input_image=os.path.join(execution_path , \"sharpness.jpg\"), output_image_path=os.path.join(execution_path , \"image_out.jpg\"))\n",
    "    people=0\n",
    "    vehicles=0\n",
    "    for eachObject in detections:\n",
    "        if eachObject[\"name\"] == \"person\" :\n",
    "            people=people+1\n",
    "        elif eachObject[\"name\"] in {\"car\",\"bicycle\",\"motorcycle\",\"truck\"} :\n",
    "            vehicles=vehicles+1\n",
    "        #print(eachObject[\"name\"] , \" : \" , eachObject[\"percentage_probability\"] )\n",
    "    print(\"\\n\\nVehicle Count: \" , vehicles)\n",
    "    import pandas as pd\n",
    "    import matplotlib.pyplot as plt\n",
    "    from sklearn.linear_model import LinearRegression\n",
    "\n",
    "    #print(\"content-type: text/html\\n\")\n",
    "    print(\" <h4> Estimating Traffic Light Time ....... </h4> </br>\")\n",
    "    i=vehicles\n",
    "    import pandas as pd\n",
    "    if i in range(0,11):\n",
    "        vc = 1\n",
    "    elif i in range(11,21):\n",
    "        vc = 2\n",
    "    elif i in range(21,31):\n",
    "        vc = 3\n",
    "    elif i in range(31,80):\n",
    "        vc = 4\n",
    "\n",
    "    data = pd.read_csv('data_traffic.csv')\n",
    "    y = data['time']\n",
    "    x = data.iloc[:, 0:4]\n",
    "    from sklearn.linear_model import LinearRegression\n",
    "    model = LinearRegression()\n",
    "    model.fit(x,y)\n",
    "    y=model.predict([[vc,2,2,3]])\n",
    "    print(\" <h2> The Estimated green light time is {} </h2>\".format(y))\n",
    "\n",
    "    x1=data['vcount']\n",
    "    y1=data['time']\n",
    "\n",
    "    plt.scatter(x1, y1, label= \"stars\", color= \"green\",  \n",
    "                marker= \"*\", s=30) \n",
    "\n",
    "    # x-axis label \n",
    "    plt.xlabel('vehicle count') \n",
    "    # frequency label \n",
    "    plt.ylabel('green light time') \n",
    "    # plot title \n",
    "    plt.title('My scatter plot!') \n",
    "    # showing legend \n",
    "    plt.legend() \n",
    "\n",
    "    # function to show the plot \n",
    "    plt.show()     \n",
    "    time.sleep(30)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "\n",
    "\n",
    "#cv2.imshow(\"cropped\", crop_img)\n",
    "#cv2.waitKey(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "\n",
    "from PIL import ImageEnhance\n",
    "\n",
    "def adjust_brightness(input_image, output_image, factor):\n",
    "\n",
    "    image = Image.open(input_image)\n",
    "\n",
    "    enhancer_object = ImageEnhance.Brightness(image)\n",
    "\n",
    "    out = enhancer_object.enhance(factor)\n",
    "\n",
    "    out.save(output_image)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    adjust_brightness('re_size.jpg',\n",
    "\n",
    "                      'brightness.jpg',\n",
    "\n",
    "                      1.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "\n",
    "from PIL import ImageEnhance\n",
    "\n",
    "def adjust_contrast(input_image, output_image, factor):\n",
    "\n",
    "    image = Image.open(input_image)\n",
    "\n",
    "    enhancer_object = ImageEnhance.Contrast(image)\n",
    "\n",
    "    out = enhancer_object.enhance(factor)\n",
    "\n",
    "    out.save(output_image)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    adjust_contrast('brightness.jpg',\n",
    "\n",
    "                    'contrast.jpg',\n",
    "\n",
    "                    1.7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "\n",
    "from PIL import ImageEnhance\n",
    "\n",
    "def adjust_sharpness(input_image, output_image, factor):\n",
    "\n",
    "    image = Image.open(input_image)\n",
    "\n",
    "    enhancer_object = ImageEnhance.Sharpness(image)\n",
    "\n",
    "    out = enhancer_object.enhance(factor)\n",
    "\n",
    "    out.save(output_image)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    adjust_sharpness('contrast.jpg',\n",
    "\n",
    "                     'sharpness.jpg',\n",
    "\n",
    "                     1.4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing libraries \n",
    "import numpy as np \n",
    "import cv2 \n",
    "from matplotlib import pyplot as plt \n",
    "\n",
    "# Reading image from folder where it is stored \n",
    "img = cv2.imread('re_size.jpg') \n",
    "\n",
    "# denoising of image saving it into dst image \n",
    "dst = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 15) \n",
    "\n",
    "# Plotting of source and destination image \n",
    "#plt.subplot(121), plt.imshow(img) \n",
    "#plt.subplot(122), plt.imshow(dst) \n",
    "\n",
    "cv2.imwrite('denoise.jpg',dst)\n",
    "\n",
    "plt.show() \n",
    "\n",
    "# Reading the input image \n",
    "img = cv2.imread('re_size.jpg') \n",
    "\n",
    "# Taking a matrix of size 5 as the kernel \n",
    "kernel = np.ones((5,5), np.uint8) \n",
    "\n",
    "# The first parameter is the original image, \n",
    "# kernel is the matrix with which image is \n",
    "# convolved and third parameter is the number \n",
    "# of iterations, which will determine how much \n",
    "# you want to erode/dilate a given image. \n",
    "img_erosion = cv2.erode(img, kernel, iterations=1) \n",
    "img_dilation = cv2.dilate(img, kernel, iterations=1) \n",
    "\n",
    "#cv2.imshow('Input', img) \n",
    "#cv2.imshow('Erosion', img_erosion) \n",
    "#cv2.imshow('Dilation', img_dilation) \n",
    "\n",
    "cv2.imwrite('erosion.jpg',img_erosion)\n",
    "cv2.imwrite('dilation.jpg',img_dilation)\n",
    "\n",
    "\n",
    "cv2.waitKey(0) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import numpy as np\n",
    "import cv2\n",
    "import time \n",
    "  \n",
    "# printing the start time  \n",
    "#print(\"The time of code execution begin is : \", end =\"\") \n",
    "#print(time.ctime()) \n",
    "# using sleep() to hault the code execution \n",
    "while True:\n",
    "    img_res = requests.get(\"http://192.168.43.72:8080/shot.jpg\")\n",
    "    img_arr = np.array(bytearray(img_res.content), dtype = np.uint8)\n",
    "    img = cv2.imdecode(img_arr,-1)\n",
    "\n",
    "    #cv2.imshow('frame', img)\n",
    "    cv2.imwrite('C:\\\\Users\\\\500061550\\\\Desktop\\\\cp.jpg',img) \n",
    "    time.sleep(2000)\n",
    "    if cv2.waitKey(0) & 0xFF == ord('q'):\n",
    "        break\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
